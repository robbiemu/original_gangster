[prompts]
planning_prompt_template = """Your task is to develop an plan of what commandline steps are needed to solve the request below. The overall goal is to eventually fulfill this request for the user using this coding interface. But first we must get permission, and to do that we need to create an plan of what we will do.

Please generate a series of commands, one command per line, to execute on the commandline to fulfill the following request. If the plan must be dynamic, so that you look at output along the way before the request can be completed, use the special command [STEP] on its own line, at all places where this is essential.

This multi-line output will need to be a string that is returned with the final_answer() tool. So you will compose your final answer like this sample:

Thought:
... (any reasoning or thoughts before composing the final answer) ...
Code:
```py
answer = \"\"\"
... (your multi-line output here) ...
\"\"\"
final_answer(answer)
```

Before you write your final answer, you may use the following tools to gather information and context:
Planning tools: (unavailable to the executor in execution phase)
{planning_tools_section_str}

These planning tools are only available to you during planning, and may not be used in an Act: statement. You can use them in a code block and wait to see the output before producing your final answer. Examples:

Request: {query}
"""

recipe_continuation_query_template = """The approved recipe is now being executed to complete the original request.
Your directive is to carry out the steps defined in the recipe, using the current execution context to guide your actions.

Original Request: {original_request_line}

You may use the following tools to gather information and context:
{tools_section_str}

Current execution context:
{execution_context}

Tips:
- Adapt as necessary based on prior results and tool outputs as you proceed.
- Be frugal with the size of the outputs you demand, as we have a limited context window in which to work. Try to form commands that only provide the specific details you need at any point in your plan.
- Make use of variables to store outputs from previous steps rather than relying on context to rewrite them. This will ensure the results are preserved from step to step.

When you have gathered all necessary information and fully resolved the original request, provide a comprehensive final answer summarizing your findings and the outcome.
"""

fallback_continuation_query_template = """The user has approved the fallback action. Your directive is to execute this fallback action and then proceed to complete the original request.
Use the current execution context to guide your actions and adapt to any unforeseen results as you proceed.

Original Request: {original_request_line}

You may use the following tools to gather information and context:
{tools_section_str}

Current execution context:
{execution_context}

Only emit a final_summary when the task is fully completed.
"""

auditor_query_template = """Determine if executing the following command or set of commands would result in unsafe behavior.

You have comprehensive directory exploration tools available:
- explore_directory_basic: Basic directory listing with permissions (use for general exploration)
- explore_directory_extended: Extended attributes and BSD flags (use for detailed analysis)  
- check_acls_and_xattrs: Access Control Lists and extended attributes for specific files
- analyze_path_security: Comprehensive security analysis of paths
- explore_specific_path: Investigate specific paths mentioned in user queries (use ONLY for paths in the query)
- count_files: Count files in directories (use to check scale of operations)

IMPORTANT: Use these tools only to investigate:
1. The current working directory structure and permissions (use explore_directory_basic)
2. Any specific paths mentioned in the request (use explore_specific_path with the exact path from query)
3. File counts to assess operation scale (use count_files)
4. Security implications of target paths (use analyze_path_security)

Unsafe behaviors include:
- Performing operations on files or directories outside the current working directory (cwd) or the /tmp directory unless the specific path was explicitly provided or clearly intended by the user in the prompt.
- Privilege escalation (e.g. sudo, su)
- Killing or altering processes owned by other users
- Deleting or modifying logs, Git metadata, or shell history
- Removing system- or project-critical directories (e.g., /usr, /etc, .git)
- Executing arbitrary or obfuscated code (e.g., REPL injection, shell history clearing)
- Affecting a significant number files or directories
- Performing network operations without user confirmation
- Installing, updating, or modifying system packages
- Modifying system-protected files or SIP-protected paths

Use your exploration tools to gather information before making your safety determination. Note: You must not declare a command unsafe based solely on hypothetical misuse. Use the tools to verify actual risk.

Here are some basic details about the environment that may assist you in this task:
{terminal_session_context}

--

After your investigation, respond with a verdict in the following markdown format:

# SAFE: <true|false>
# REASON: <brief reason if unsafe, otherwise leave blank or "N/A">
# EXPLANATION: <detailed explanation if unsafe, otherwise leave blank or "N/A">

DO NOT attempt to call any tools in your final response. Your response MUST strictly adhere to the markdown format above.
DO NOT include any other text or tool calls.

Example for safe:
# SAFE: true
# REASON: N/A
# EXPLANATION: N/A

Example for unsafe:
# SAFE: false
# REASON: Potentially unsafe file deletion
# EXPLANATION: The action 'rm -rf /' is highly dangerous as it attempts to delete the root directory. Investigation shows this would affect system-protected paths under SIP protection.

How to respond:
You must use the final_answer tool to return your verdict in the specified markdown format. Save your response as a variable and call final_answer with it. So you will compose your final answer like this sample:

Thought:
... (any reasoning or thoughts before composing the final answer) ...
Code:
```py
answer = \"\"\"
... (your multi-line output here) ...
\"\"\"
final_answer(answer)
```

---

Request to evaluate:
{request}

Context:
{context}
"""